// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/ConfigInfo
type ConfigInfo struct {
	Definition OptConfigKeyInfo   `json:"definition"`
	Value      OptConfigValueInfo `json:"value"`
}

// GetDefinition returns the value of Definition.
func (s *ConfigInfo) GetDefinition() OptConfigKeyInfo {
	return s.Definition
}

// GetValue returns the value of Value.
func (s *ConfigInfo) GetValue() OptConfigValueInfo {
	return s.Value
}

// SetDefinition sets the value of Definition.
func (s *ConfigInfo) SetDefinition(val OptConfigKeyInfo) {
	s.Definition = val
}

// SetValue sets the value of Value.
func (s *ConfigInfo) SetValue(val OptConfigValueInfo) {
	s.Value = val
}

// Ref: #/components/schemas/ConfigInfos
type ConfigInfos struct {
	Configs    []ConfigInfo `json:"configs"`
	ErrorCount OptInt32     `json:"error_count"`
	Groups     []string     `json:"groups"`
	Name       OptString    `json:"name"`
}

// GetConfigs returns the value of Configs.
func (s *ConfigInfos) GetConfigs() []ConfigInfo {
	return s.Configs
}

// GetErrorCount returns the value of ErrorCount.
func (s *ConfigInfos) GetErrorCount() OptInt32 {
	return s.ErrorCount
}

// GetGroups returns the value of Groups.
func (s *ConfigInfos) GetGroups() []string {
	return s.Groups
}

// GetName returns the value of Name.
func (s *ConfigInfos) GetName() OptString {
	return s.Name
}

// SetConfigs sets the value of Configs.
func (s *ConfigInfos) SetConfigs(val []ConfigInfo) {
	s.Configs = val
}

// SetErrorCount sets the value of ErrorCount.
func (s *ConfigInfos) SetErrorCount(val OptInt32) {
	s.ErrorCount = val
}

// SetGroups sets the value of Groups.
func (s *ConfigInfos) SetGroups(val []string) {
	s.Groups = val
}

// SetName sets the value of Name.
func (s *ConfigInfos) SetName(val OptString) {
	s.Name = val
}

// ConfigInfosStatusCode wraps ConfigInfos with StatusCode.
type ConfigInfosStatusCode struct {
	StatusCode int
	Response   ConfigInfos
}

// GetStatusCode returns the value of StatusCode.
func (s *ConfigInfosStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ConfigInfosStatusCode) GetResponse() ConfigInfos {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ConfigInfosStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ConfigInfosStatusCode) SetResponse(val ConfigInfos) {
	s.Response = val
}

// Ref: #/components/schemas/ConfigKeyInfo
type ConfigKeyInfo struct {
	DefaultValue  OptString `json:"default_value"`
	Dependents    []string  `json:"dependents"`
	DisplayName   OptString `json:"display_name"`
	Documentation OptString `json:"documentation"`
	Group         OptString `json:"group"`
	Importance    OptString `json:"importance"`
	Name          OptString `json:"name"`
	Order         OptInt32  `json:"order"`
	OrderInGroup  OptInt32  `json:"order_in_group"`
	Required      OptBool   `json:"required"`
	Type          OptString `json:"type"`
	Width         OptString `json:"width"`
}

// GetDefaultValue returns the value of DefaultValue.
func (s *ConfigKeyInfo) GetDefaultValue() OptString {
	return s.DefaultValue
}

// GetDependents returns the value of Dependents.
func (s *ConfigKeyInfo) GetDependents() []string {
	return s.Dependents
}

// GetDisplayName returns the value of DisplayName.
func (s *ConfigKeyInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetDocumentation returns the value of Documentation.
func (s *ConfigKeyInfo) GetDocumentation() OptString {
	return s.Documentation
}

// GetGroup returns the value of Group.
func (s *ConfigKeyInfo) GetGroup() OptString {
	return s.Group
}

// GetImportance returns the value of Importance.
func (s *ConfigKeyInfo) GetImportance() OptString {
	return s.Importance
}

// GetName returns the value of Name.
func (s *ConfigKeyInfo) GetName() OptString {
	return s.Name
}

// GetOrder returns the value of Order.
func (s *ConfigKeyInfo) GetOrder() OptInt32 {
	return s.Order
}

// GetOrderInGroup returns the value of OrderInGroup.
func (s *ConfigKeyInfo) GetOrderInGroup() OptInt32 {
	return s.OrderInGroup
}

// GetRequired returns the value of Required.
func (s *ConfigKeyInfo) GetRequired() OptBool {
	return s.Required
}

// GetType returns the value of Type.
func (s *ConfigKeyInfo) GetType() OptString {
	return s.Type
}

// GetWidth returns the value of Width.
func (s *ConfigKeyInfo) GetWidth() OptString {
	return s.Width
}

// SetDefaultValue sets the value of DefaultValue.
func (s *ConfigKeyInfo) SetDefaultValue(val OptString) {
	s.DefaultValue = val
}

// SetDependents sets the value of Dependents.
func (s *ConfigKeyInfo) SetDependents(val []string) {
	s.Dependents = val
}

// SetDisplayName sets the value of DisplayName.
func (s *ConfigKeyInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetDocumentation sets the value of Documentation.
func (s *ConfigKeyInfo) SetDocumentation(val OptString) {
	s.Documentation = val
}

// SetGroup sets the value of Group.
func (s *ConfigKeyInfo) SetGroup(val OptString) {
	s.Group = val
}

// SetImportance sets the value of Importance.
func (s *ConfigKeyInfo) SetImportance(val OptString) {
	s.Importance = val
}

// SetName sets the value of Name.
func (s *ConfigKeyInfo) SetName(val OptString) {
	s.Name = val
}

// SetOrder sets the value of Order.
func (s *ConfigKeyInfo) SetOrder(val OptInt32) {
	s.Order = val
}

// SetOrderInGroup sets the value of OrderInGroup.
func (s *ConfigKeyInfo) SetOrderInGroup(val OptInt32) {
	s.OrderInGroup = val
}

// SetRequired sets the value of Required.
func (s *ConfigKeyInfo) SetRequired(val OptBool) {
	s.Required = val
}

// SetType sets the value of Type.
func (s *ConfigKeyInfo) SetType(val OptString) {
	s.Type = val
}

// SetWidth sets the value of Width.
func (s *ConfigKeyInfo) SetWidth(val OptString) {
	s.Width = val
}

// Ref: #/components/schemas/ConfigValueInfo
type ConfigValueInfo struct {
	Errors            []string  `json:"errors"`
	Name              OptString `json:"name"`
	RecommendedValues []string  `json:"recommended_values"`
	Value             OptString `json:"value"`
	Visible           OptBool   `json:"visible"`
}

// GetErrors returns the value of Errors.
func (s *ConfigValueInfo) GetErrors() []string {
	return s.Errors
}

// GetName returns the value of Name.
func (s *ConfigValueInfo) GetName() OptString {
	return s.Name
}

// GetRecommendedValues returns the value of RecommendedValues.
func (s *ConfigValueInfo) GetRecommendedValues() []string {
	return s.RecommendedValues
}

// GetValue returns the value of Value.
func (s *ConfigValueInfo) GetValue() OptString {
	return s.Value
}

// GetVisible returns the value of Visible.
func (s *ConfigValueInfo) GetVisible() OptBool {
	return s.Visible
}

// SetErrors sets the value of Errors.
func (s *ConfigValueInfo) SetErrors(val []string) {
	s.Errors = val
}

// SetName sets the value of Name.
func (s *ConfigValueInfo) SetName(val OptString) {
	s.Name = val
}

// SetRecommendedValues sets the value of RecommendedValues.
func (s *ConfigValueInfo) SetRecommendedValues(val []string) {
	s.RecommendedValues = val
}

// SetValue sets the value of Value.
func (s *ConfigValueInfo) SetValue(val OptString) {
	s.Value = val
}

// SetVisible sets the value of Visible.
func (s *ConfigValueInfo) SetVisible(val OptBool) {
	s.Visible = val
}

// Ref: #/components/schemas/ConnectorActiveTopics
type ConnectorActiveTopics map[string]ConnectorActiveTopicsItem

func (s *ConnectorActiveTopics) init() ConnectorActiveTopics {
	m := *s
	if m == nil {
		m = map[string]ConnectorActiveTopicsItem{}
		*s = m
	}
	return m
}

type ConnectorActiveTopicsItem struct {
	Topics []string `json:"topics"`
}

// GetTopics returns the value of Topics.
func (s *ConnectorActiveTopicsItem) GetTopics() []string {
	return s.Topics
}

// SetTopics sets the value of Topics.
func (s *ConnectorActiveTopicsItem) SetTopics(val []string) {
	s.Topics = val
}

// ConnectorActiveTopicsStatusCode wraps ConnectorActiveTopics with StatusCode.
type ConnectorActiveTopicsStatusCode struct {
	StatusCode int
	Response   ConnectorActiveTopics
}

// GetStatusCode returns the value of StatusCode.
func (s *ConnectorActiveTopicsStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ConnectorActiveTopicsStatusCode) GetResponse() ConnectorActiveTopics {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ConnectorActiveTopicsStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ConnectorActiveTopicsStatusCode) SetResponse(val ConnectorActiveTopics) {
	s.Response = val
}

// Ref: #/components/schemas/ConnectorConfig
type ConnectorConfig map[string]string

func (s *ConnectorConfig) init() ConnectorConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ConnectorInfo
type ConnectorInfo struct {
	Config OptConnectorInfoConfig `json:"config"`
	Name   OptString              `json:"name"`
	Tasks  []ConnectorTaskId      `json:"tasks"`
	Type   OptConnectorInfoType   `json:"type"`
}

// GetConfig returns the value of Config.
func (s *ConnectorInfo) GetConfig() OptConnectorInfoConfig {
	return s.Config
}

// GetName returns the value of Name.
func (s *ConnectorInfo) GetName() OptString {
	return s.Name
}

// GetTasks returns the value of Tasks.
func (s *ConnectorInfo) GetTasks() []ConnectorTaskId {
	return s.Tasks
}

// GetType returns the value of Type.
func (s *ConnectorInfo) GetType() OptConnectorInfoType {
	return s.Type
}

// SetConfig sets the value of Config.
func (s *ConnectorInfo) SetConfig(val OptConnectorInfoConfig) {
	s.Config = val
}

// SetName sets the value of Name.
func (s *ConnectorInfo) SetName(val OptString) {
	s.Name = val
}

// SetTasks sets the value of Tasks.
func (s *ConnectorInfo) SetTasks(val []ConnectorTaskId) {
	s.Tasks = val
}

// SetType sets the value of Type.
func (s *ConnectorInfo) SetType(val OptConnectorInfoType) {
	s.Type = val
}

type ConnectorInfoConfig map[string]string

func (s *ConnectorInfoConfig) init() ConnectorInfoConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ConnectorInfoStatusCode wraps ConnectorInfo with StatusCode.
type ConnectorInfoStatusCode struct {
	StatusCode int
	Response   ConnectorInfo
}

// GetStatusCode returns the value of StatusCode.
func (s *ConnectorInfoStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ConnectorInfoStatusCode) GetResponse() ConnectorInfo {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ConnectorInfoStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ConnectorInfoStatusCode) SetResponse(val ConnectorInfo) {
	s.Response = val
}

type ConnectorInfoType string

const (
	ConnectorInfoTypeSource  ConnectorInfoType = "source"
	ConnectorInfoTypeSink    ConnectorInfoType = "sink"
	ConnectorInfoTypeUnknown ConnectorInfoType = "unknown"
)

// AllValues returns all ConnectorInfoType values.
func (ConnectorInfoType) AllValues() []ConnectorInfoType {
	return []ConnectorInfoType{
		ConnectorInfoTypeSource,
		ConnectorInfoTypeSink,
		ConnectorInfoTypeUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorInfoType) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorInfoTypeSource:
		return []byte(s), nil
	case ConnectorInfoTypeSink:
		return []byte(s), nil
	case ConnectorInfoTypeUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorInfoType) UnmarshalText(data []byte) error {
	switch ConnectorInfoType(data) {
	case ConnectorInfoTypeSource:
		*s = ConnectorInfoTypeSource
		return nil
	case ConnectorInfoTypeSink:
		*s = ConnectorInfoTypeSink
		return nil
	case ConnectorInfoTypeUnknown:
		*s = ConnectorInfoTypeUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ConnectorOffset
type ConnectorOffset struct {
	Offset    OptConnectorOffsetOffset    `json:"offset"`
	Partition OptConnectorOffsetPartition `json:"partition"`
}

// GetOffset returns the value of Offset.
func (s *ConnectorOffset) GetOffset() OptConnectorOffsetOffset {
	return s.Offset
}

// GetPartition returns the value of Partition.
func (s *ConnectorOffset) GetPartition() OptConnectorOffsetPartition {
	return s.Partition
}

// SetOffset sets the value of Offset.
func (s *ConnectorOffset) SetOffset(val OptConnectorOffsetOffset) {
	s.Offset = val
}

// SetPartition sets the value of Partition.
func (s *ConnectorOffset) SetPartition(val OptConnectorOffsetPartition) {
	s.Partition = val
}

type ConnectorOffsetOffset map[string]ConnectorOffsetOffsetItem

func (s *ConnectorOffsetOffset) init() ConnectorOffsetOffset {
	m := *s
	if m == nil {
		m = map[string]ConnectorOffsetOffsetItem{}
		*s = m
	}
	return m
}

type ConnectorOffsetOffsetItem struct{}

type ConnectorOffsetPartition map[string]ConnectorOffsetPartitionItem

func (s *ConnectorOffsetPartition) init() ConnectorOffsetPartition {
	m := *s
	if m == nil {
		m = map[string]ConnectorOffsetPartitionItem{}
		*s = m
	}
	return m
}

type ConnectorOffsetPartitionItem struct{}

// Ref: #/components/schemas/ConnectorOffsets
type ConnectorOffsets struct {
	Offsets []ConnectorOffset `json:"offsets"`
}

// GetOffsets returns the value of Offsets.
func (s *ConnectorOffsets) GetOffsets() []ConnectorOffset {
	return s.Offsets
}

// SetOffsets sets the value of Offsets.
func (s *ConnectorOffsets) SetOffsets(val []ConnectorOffset) {
	s.Offsets = val
}

// ConnectorOffsetsStatusCode wraps ConnectorOffsets with StatusCode.
type ConnectorOffsetsStatusCode struct {
	StatusCode int
	Response   ConnectorOffsets
}

// GetStatusCode returns the value of StatusCode.
func (s *ConnectorOffsetsStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ConnectorOffsetsStatusCode) GetResponse() ConnectorOffsets {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ConnectorOffsetsStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ConnectorOffsetsStatusCode) SetResponse(val ConnectorOffsets) {
	s.Response = val
}

// Ref: #/components/schemas/ConnectorState
type ConnectorState struct {
	Msg      OptString `json:"msg"`
	State    OptString `json:"state"`
	Trace    OptString `json:"trace"`
	WorkerID OptString `json:"worker_id"`
}

// GetMsg returns the value of Msg.
func (s *ConnectorState) GetMsg() OptString {
	return s.Msg
}

// GetState returns the value of State.
func (s *ConnectorState) GetState() OptString {
	return s.State
}

// GetTrace returns the value of Trace.
func (s *ConnectorState) GetTrace() OptString {
	return s.Trace
}

// GetWorkerID returns the value of WorkerID.
func (s *ConnectorState) GetWorkerID() OptString {
	return s.WorkerID
}

// SetMsg sets the value of Msg.
func (s *ConnectorState) SetMsg(val OptString) {
	s.Msg = val
}

// SetState sets the value of State.
func (s *ConnectorState) SetState(val OptString) {
	s.State = val
}

// SetTrace sets the value of Trace.
func (s *ConnectorState) SetTrace(val OptString) {
	s.Trace = val
}

// SetWorkerID sets the value of WorkerID.
func (s *ConnectorState) SetWorkerID(val OptString) {
	s.WorkerID = val
}

// Ref: #/components/schemas/ConnectorStateInfo
type ConnectorStateInfo struct {
	Connector OptConnectorState         `json:"connector"`
	Name      OptString                 `json:"name"`
	Tasks     []TaskState               `json:"tasks"`
	Type      OptConnectorStateInfoType `json:"type"`
}

// GetConnector returns the value of Connector.
func (s *ConnectorStateInfo) GetConnector() OptConnectorState {
	return s.Connector
}

// GetName returns the value of Name.
func (s *ConnectorStateInfo) GetName() OptString {
	return s.Name
}

// GetTasks returns the value of Tasks.
func (s *ConnectorStateInfo) GetTasks() []TaskState {
	return s.Tasks
}

// GetType returns the value of Type.
func (s *ConnectorStateInfo) GetType() OptConnectorStateInfoType {
	return s.Type
}

// SetConnector sets the value of Connector.
func (s *ConnectorStateInfo) SetConnector(val OptConnectorState) {
	s.Connector = val
}

// SetName sets the value of Name.
func (s *ConnectorStateInfo) SetName(val OptString) {
	s.Name = val
}

// SetTasks sets the value of Tasks.
func (s *ConnectorStateInfo) SetTasks(val []TaskState) {
	s.Tasks = val
}

// SetType sets the value of Type.
func (s *ConnectorStateInfo) SetType(val OptConnectorStateInfoType) {
	s.Type = val
}

// ConnectorStateInfoStatusCode wraps ConnectorStateInfo with StatusCode.
type ConnectorStateInfoStatusCode struct {
	StatusCode int
	Response   ConnectorStateInfo
}

// GetStatusCode returns the value of StatusCode.
func (s *ConnectorStateInfoStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ConnectorStateInfoStatusCode) GetResponse() ConnectorStateInfo {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ConnectorStateInfoStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ConnectorStateInfoStatusCode) SetResponse(val ConnectorStateInfo) {
	s.Response = val
}

type ConnectorStateInfoType string

const (
	ConnectorStateInfoTypeSource  ConnectorStateInfoType = "source"
	ConnectorStateInfoTypeSink    ConnectorStateInfoType = "sink"
	ConnectorStateInfoTypeUnknown ConnectorStateInfoType = "unknown"
)

// AllValues returns all ConnectorStateInfoType values.
func (ConnectorStateInfoType) AllValues() []ConnectorStateInfoType {
	return []ConnectorStateInfoType{
		ConnectorStateInfoTypeSource,
		ConnectorStateInfoTypeSink,
		ConnectorStateInfoTypeUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConnectorStateInfoType) MarshalText() ([]byte, error) {
	switch s {
	case ConnectorStateInfoTypeSource:
		return []byte(s), nil
	case ConnectorStateInfoTypeSink:
		return []byte(s), nil
	case ConnectorStateInfoTypeUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConnectorStateInfoType) UnmarshalText(data []byte) error {
	switch ConnectorStateInfoType(data) {
	case ConnectorStateInfoTypeSource:
		*s = ConnectorStateInfoTypeSource
		return nil
	case ConnectorStateInfoTypeSink:
		*s = ConnectorStateInfoTypeSink
		return nil
	case ConnectorStateInfoTypeUnknown:
		*s = ConnectorStateInfoTypeUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ConnectorTaskId
type ConnectorTaskId struct {
	Connector OptString `json:"connector"`
	Task      OptInt32  `json:"task"`
}

// GetConnector returns the value of Connector.
func (s *ConnectorTaskId) GetConnector() OptString {
	return s.Connector
}

// GetTask returns the value of Task.
func (s *ConnectorTaskId) GetTask() OptInt32 {
	return s.Task
}

// SetConnector sets the value of Connector.
func (s *ConnectorTaskId) SetConnector(val OptString) {
	s.Connector = val
}

// SetTask sets the value of Task.
func (s *ConnectorTaskId) SetTask(val OptInt32) {
	s.Task = val
}

// Ref: #/components/schemas/CreateConnectorRequest
type CreateConnectorRequest struct {
	Config       OptConnectorConfig                    `json:"config"`
	InitialState OptCreateConnectorRequestInitialState `json:"initial_state"`
	Name         OptString                             `json:"name"`
}

// GetConfig returns the value of Config.
func (s *CreateConnectorRequest) GetConfig() OptConnectorConfig {
	return s.Config
}

// GetInitialState returns the value of InitialState.
func (s *CreateConnectorRequest) GetInitialState() OptCreateConnectorRequestInitialState {
	return s.InitialState
}

// GetName returns the value of Name.
func (s *CreateConnectorRequest) GetName() OptString {
	return s.Name
}

// SetConfig sets the value of Config.
func (s *CreateConnectorRequest) SetConfig(val OptConnectorConfig) {
	s.Config = val
}

// SetInitialState sets the value of InitialState.
func (s *CreateConnectorRequest) SetInitialState(val OptCreateConnectorRequestInitialState) {
	s.InitialState = val
}

// SetName sets the value of Name.
func (s *CreateConnectorRequest) SetName(val OptString) {
	s.Name = val
}

type CreateConnectorRequestInitialState string

const (
	CreateConnectorRequestInitialStateRUNNING CreateConnectorRequestInitialState = "RUNNING"
	CreateConnectorRequestInitialStatePAUSED  CreateConnectorRequestInitialState = "PAUSED"
	CreateConnectorRequestInitialStateSTOPPED CreateConnectorRequestInitialState = "STOPPED"
)

// AllValues returns all CreateConnectorRequestInitialState values.
func (CreateConnectorRequestInitialState) AllValues() []CreateConnectorRequestInitialState {
	return []CreateConnectorRequestInitialState{
		CreateConnectorRequestInitialStateRUNNING,
		CreateConnectorRequestInitialStatePAUSED,
		CreateConnectorRequestInitialStateSTOPPED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateConnectorRequestInitialState) MarshalText() ([]byte, error) {
	switch s {
	case CreateConnectorRequestInitialStateRUNNING:
		return []byte(s), nil
	case CreateConnectorRequestInitialStatePAUSED:
		return []byte(s), nil
	case CreateConnectorRequestInitialStateSTOPPED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateConnectorRequestInitialState) UnmarshalText(data []byte) error {
	switch CreateConnectorRequestInitialState(data) {
	case CreateConnectorRequestInitialStateRUNNING:
		*s = CreateConnectorRequestInitialStateRUNNING
		return nil
	case CreateConnectorRequestInitialStatePAUSED:
		*s = CreateConnectorRequestInitialStatePAUSED
		return nil
	case CreateConnectorRequestInitialStateSTOPPED:
		*s = CreateConnectorRequestInitialStateSTOPPED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetConnectorConfigDef map[string]string

func (s *GetConnectorConfigDef) init() GetConnectorConfigDef {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// GetConnectorConfigDefDefStatusCode wraps []ConfigKeyInfo with StatusCode.
type GetConnectorConfigDefDefStatusCode struct {
	StatusCode int
	Response   []ConfigKeyInfo
}

// GetStatusCode returns the value of StatusCode.
func (s *GetConnectorConfigDefDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GetConnectorConfigDefDefStatusCode) GetResponse() []ConfigKeyInfo {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GetConnectorConfigDefDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GetConnectorConfigDefDefStatusCode) SetResponse(val []ConfigKeyInfo) {
	s.Response = val
}

// GetConnectorConfigDefStatusCode wraps GetConnectorConfigDef with StatusCode.
type GetConnectorConfigDefStatusCode struct {
	StatusCode int
	Response   GetConnectorConfigDef
}

// GetStatusCode returns the value of StatusCode.
func (s *GetConnectorConfigDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GetConnectorConfigDefStatusCode) GetResponse() GetConnectorConfigDef {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GetConnectorConfigDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GetConnectorConfigDefStatusCode) SetResponse(val GetConnectorConfigDef) {
	s.Response = val
}

// GetTaskConfigsDefStatusCode wraps []TaskInfo with StatusCode.
type GetTaskConfigsDefStatusCode struct {
	StatusCode int
	Response   []TaskInfo
}

// GetStatusCode returns the value of StatusCode.
func (s *GetTaskConfigsDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GetTaskConfigsDefStatusCode) GetResponse() []TaskInfo {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GetTaskConfigsDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GetTaskConfigsDefStatusCode) SetResponse(val []TaskInfo) {
	s.Response = val
}

type GetTasksConfigDef map[string]GetTasksConfigDefItem

func (s *GetTasksConfigDef) init() GetTasksConfigDef {
	m := *s
	if m == nil {
		m = map[string]GetTasksConfigDefItem{}
		*s = m
	}
	return m
}

type GetTasksConfigDefItem map[string]string

func (s *GetTasksConfigDefItem) init() GetTasksConfigDefItem {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// GetTasksConfigDefStatusCode wraps GetTasksConfigDef with StatusCode.
type GetTasksConfigDefStatusCode struct {
	StatusCode int
	Response   GetTasksConfigDef
}

// GetStatusCode returns the value of StatusCode.
func (s *GetTasksConfigDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GetTasksConfigDefStatusCode) GetResponse() GetTasksConfigDef {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GetTasksConfigDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GetTasksConfigDefStatusCode) SetResponse(val GetTasksConfigDef) {
	s.Response = val
}

// ListConnectorPluginsDefStatusCode wraps []PluginInfo with StatusCode.
type ListConnectorPluginsDefStatusCode struct {
	StatusCode int
	Response   []PluginInfo
}

// GetStatusCode returns the value of StatusCode.
func (s *ListConnectorPluginsDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ListConnectorPluginsDefStatusCode) GetResponse() []PluginInfo {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ListConnectorPluginsDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ListConnectorPluginsDefStatusCode) SetResponse(val []PluginInfo) {
	s.Response = val
}

// ListConnectorsDefStatusCode wraps []string with StatusCode.
type ListConnectorsDefStatusCode struct {
	StatusCode int
	Response   []string
}

// GetStatusCode returns the value of StatusCode.
func (s *ListConnectorsDefStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ListConnectorsDefStatusCode) GetResponse() []string {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ListConnectorsDefStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ListConnectorsDefStatusCode) SetResponse(val []string) {
	s.Response = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigKeyInfo returns new OptConfigKeyInfo with value set to v.
func NewOptConfigKeyInfo(v ConfigKeyInfo) OptConfigKeyInfo {
	return OptConfigKeyInfo{
		Value: v,
		Set:   true,
	}
}

// OptConfigKeyInfo is optional ConfigKeyInfo.
type OptConfigKeyInfo struct {
	Value ConfigKeyInfo
	Set   bool
}

// IsSet returns true if OptConfigKeyInfo was set.
func (o OptConfigKeyInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigKeyInfo) Reset() {
	var v ConfigKeyInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigKeyInfo) SetTo(v ConfigKeyInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigKeyInfo) Get() (v ConfigKeyInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigKeyInfo) Or(d ConfigKeyInfo) ConfigKeyInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConfigValueInfo returns new OptConfigValueInfo with value set to v.
func NewOptConfigValueInfo(v ConfigValueInfo) OptConfigValueInfo {
	return OptConfigValueInfo{
		Value: v,
		Set:   true,
	}
}

// OptConfigValueInfo is optional ConfigValueInfo.
type OptConfigValueInfo struct {
	Value ConfigValueInfo
	Set   bool
}

// IsSet returns true if OptConfigValueInfo was set.
func (o OptConfigValueInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConfigValueInfo) Reset() {
	var v ConfigValueInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConfigValueInfo) SetTo(v ConfigValueInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConfigValueInfo) Get() (v ConfigValueInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConfigValueInfo) Or(d ConfigValueInfo) ConfigValueInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorConfig returns new OptConnectorConfig with value set to v.
func NewOptConnectorConfig(v ConnectorConfig) OptConnectorConfig {
	return OptConnectorConfig{
		Value: v,
		Set:   true,
	}
}

// OptConnectorConfig is optional ConnectorConfig.
type OptConnectorConfig struct {
	Value ConnectorConfig
	Set   bool
}

// IsSet returns true if OptConnectorConfig was set.
func (o OptConnectorConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorConfig) Reset() {
	var v ConnectorConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorConfig) SetTo(v ConnectorConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorConfig) Get() (v ConnectorConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorConfig) Or(d ConnectorConfig) ConnectorConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorInfoConfig returns new OptConnectorInfoConfig with value set to v.
func NewOptConnectorInfoConfig(v ConnectorInfoConfig) OptConnectorInfoConfig {
	return OptConnectorInfoConfig{
		Value: v,
		Set:   true,
	}
}

// OptConnectorInfoConfig is optional ConnectorInfoConfig.
type OptConnectorInfoConfig struct {
	Value ConnectorInfoConfig
	Set   bool
}

// IsSet returns true if OptConnectorInfoConfig was set.
func (o OptConnectorInfoConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorInfoConfig) Reset() {
	var v ConnectorInfoConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorInfoConfig) SetTo(v ConnectorInfoConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorInfoConfig) Get() (v ConnectorInfoConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorInfoConfig) Or(d ConnectorInfoConfig) ConnectorInfoConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorInfoType returns new OptConnectorInfoType with value set to v.
func NewOptConnectorInfoType(v ConnectorInfoType) OptConnectorInfoType {
	return OptConnectorInfoType{
		Value: v,
		Set:   true,
	}
}

// OptConnectorInfoType is optional ConnectorInfoType.
type OptConnectorInfoType struct {
	Value ConnectorInfoType
	Set   bool
}

// IsSet returns true if OptConnectorInfoType was set.
func (o OptConnectorInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorInfoType) Reset() {
	var v ConnectorInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorInfoType) SetTo(v ConnectorInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorInfoType) Get() (v ConnectorInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorInfoType) Or(d ConnectorInfoType) ConnectorInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorOffsetOffset returns new OptConnectorOffsetOffset with value set to v.
func NewOptConnectorOffsetOffset(v ConnectorOffsetOffset) OptConnectorOffsetOffset {
	return OptConnectorOffsetOffset{
		Value: v,
		Set:   true,
	}
}

// OptConnectorOffsetOffset is optional ConnectorOffsetOffset.
type OptConnectorOffsetOffset struct {
	Value ConnectorOffsetOffset
	Set   bool
}

// IsSet returns true if OptConnectorOffsetOffset was set.
func (o OptConnectorOffsetOffset) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorOffsetOffset) Reset() {
	var v ConnectorOffsetOffset
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorOffsetOffset) SetTo(v ConnectorOffsetOffset) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorOffsetOffset) Get() (v ConnectorOffsetOffset, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorOffsetOffset) Or(d ConnectorOffsetOffset) ConnectorOffsetOffset {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorOffsetPartition returns new OptConnectorOffsetPartition with value set to v.
func NewOptConnectorOffsetPartition(v ConnectorOffsetPartition) OptConnectorOffsetPartition {
	return OptConnectorOffsetPartition{
		Value: v,
		Set:   true,
	}
}

// OptConnectorOffsetPartition is optional ConnectorOffsetPartition.
type OptConnectorOffsetPartition struct {
	Value ConnectorOffsetPartition
	Set   bool
}

// IsSet returns true if OptConnectorOffsetPartition was set.
func (o OptConnectorOffsetPartition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorOffsetPartition) Reset() {
	var v ConnectorOffsetPartition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorOffsetPartition) SetTo(v ConnectorOffsetPartition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorOffsetPartition) Get() (v ConnectorOffsetPartition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorOffsetPartition) Or(d ConnectorOffsetPartition) ConnectorOffsetPartition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorState returns new OptConnectorState with value set to v.
func NewOptConnectorState(v ConnectorState) OptConnectorState {
	return OptConnectorState{
		Value: v,
		Set:   true,
	}
}

// OptConnectorState is optional ConnectorState.
type OptConnectorState struct {
	Value ConnectorState
	Set   bool
}

// IsSet returns true if OptConnectorState was set.
func (o OptConnectorState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorState) Reset() {
	var v ConnectorState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorState) SetTo(v ConnectorState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorState) Get() (v ConnectorState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorState) Or(d ConnectorState) ConnectorState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorStateInfoType returns new OptConnectorStateInfoType with value set to v.
func NewOptConnectorStateInfoType(v ConnectorStateInfoType) OptConnectorStateInfoType {
	return OptConnectorStateInfoType{
		Value: v,
		Set:   true,
	}
}

// OptConnectorStateInfoType is optional ConnectorStateInfoType.
type OptConnectorStateInfoType struct {
	Value ConnectorStateInfoType
	Set   bool
}

// IsSet returns true if OptConnectorStateInfoType was set.
func (o OptConnectorStateInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorStateInfoType) Reset() {
	var v ConnectorStateInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorStateInfoType) SetTo(v ConnectorStateInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorStateInfoType) Get() (v ConnectorStateInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorStateInfoType) Or(d ConnectorStateInfoType) ConnectorStateInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConnectorTaskId returns new OptConnectorTaskId with value set to v.
func NewOptConnectorTaskId(v ConnectorTaskId) OptConnectorTaskId {
	return OptConnectorTaskId{
		Value: v,
		Set:   true,
	}
}

// OptConnectorTaskId is optional ConnectorTaskId.
type OptConnectorTaskId struct {
	Value ConnectorTaskId
	Set   bool
}

// IsSet returns true if OptConnectorTaskId was set.
func (o OptConnectorTaskId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConnectorTaskId) Reset() {
	var v ConnectorTaskId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConnectorTaskId) SetTo(v ConnectorTaskId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConnectorTaskId) Get() (v ConnectorTaskId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConnectorTaskId) Or(d ConnectorTaskId) ConnectorTaskId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateConnectorRequest returns new OptCreateConnectorRequest with value set to v.
func NewOptCreateConnectorRequest(v CreateConnectorRequest) OptCreateConnectorRequest {
	return OptCreateConnectorRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateConnectorRequest is optional CreateConnectorRequest.
type OptCreateConnectorRequest struct {
	Value CreateConnectorRequest
	Set   bool
}

// IsSet returns true if OptCreateConnectorRequest was set.
func (o OptCreateConnectorRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateConnectorRequest) Reset() {
	var v CreateConnectorRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateConnectorRequest) SetTo(v CreateConnectorRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateConnectorRequest) Get() (v CreateConnectorRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateConnectorRequest) Or(d CreateConnectorRequest) CreateConnectorRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateConnectorRequestInitialState returns new OptCreateConnectorRequestInitialState with value set to v.
func NewOptCreateConnectorRequestInitialState(v CreateConnectorRequestInitialState) OptCreateConnectorRequestInitialState {
	return OptCreateConnectorRequestInitialState{
		Value: v,
		Set:   true,
	}
}

// OptCreateConnectorRequestInitialState is optional CreateConnectorRequestInitialState.
type OptCreateConnectorRequestInitialState struct {
	Value CreateConnectorRequestInitialState
	Set   bool
}

// IsSet returns true if OptCreateConnectorRequestInitialState was set.
func (o OptCreateConnectorRequestInitialState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateConnectorRequestInitialState) Reset() {
	var v CreateConnectorRequestInitialState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateConnectorRequestInitialState) SetTo(v CreateConnectorRequestInitialState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateConnectorRequestInitialState) Get() (v CreateConnectorRequestInitialState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateConnectorRequestInitialState) Or(d CreateConnectorRequestInitialState) CreateConnectorRequestInitialState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskInfoConfig returns new OptTaskInfoConfig with value set to v.
func NewOptTaskInfoConfig(v TaskInfoConfig) OptTaskInfoConfig {
	return OptTaskInfoConfig{
		Value: v,
		Set:   true,
	}
}

// OptTaskInfoConfig is optional TaskInfoConfig.
type OptTaskInfoConfig struct {
	Value TaskInfoConfig
	Set   bool
}

// IsSet returns true if OptTaskInfoConfig was set.
func (o OptTaskInfoConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskInfoConfig) Reset() {
	var v TaskInfoConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskInfoConfig) SetTo(v TaskInfoConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskInfoConfig) Get() (v TaskInfoConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskInfoConfig) Or(d TaskInfoConfig) TaskInfoConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptValidateConfigsReq returns new OptValidateConfigsReq with value set to v.
func NewOptValidateConfigsReq(v ValidateConfigsReq) OptValidateConfigsReq {
	return OptValidateConfigsReq{
		Value: v,
		Set:   true,
	}
}

// OptValidateConfigsReq is optional ValidateConfigsReq.
type OptValidateConfigsReq struct {
	Value ValidateConfigsReq
	Set   bool
}

// IsSet returns true if OptValidateConfigsReq was set.
func (o OptValidateConfigsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptValidateConfigsReq) Reset() {
	var v ValidateConfigsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptValidateConfigsReq) SetTo(v ValidateConfigsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptValidateConfigsReq) Get() (v ValidateConfigsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptValidateConfigsReq) Or(d ValidateConfigsReq) ValidateConfigsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PluginInfo
type PluginInfo struct {
	Class   OptString `json:"class"`
	Type    OptString `json:"type"`
	Version OptString `json:"version"`
}

// GetClass returns the value of Class.
func (s *PluginInfo) GetClass() OptString {
	return s.Class
}

// GetType returns the value of Type.
func (s *PluginInfo) GetType() OptString {
	return s.Type
}

// GetVersion returns the value of Version.
func (s *PluginInfo) GetVersion() OptString {
	return s.Version
}

// SetClass sets the value of Class.
func (s *PluginInfo) SetClass(val OptString) {
	s.Class = val
}

// SetType sets the value of Type.
func (s *PluginInfo) SetType(val OptString) {
	s.Type = val
}

// SetVersion sets the value of Version.
func (s *PluginInfo) SetVersion(val OptString) {
	s.Version = val
}

// Ref: #/components/schemas/ServerInfo
type ServerInfo struct {
	Commit         OptString `json:"commit"`
	KafkaClusterID OptString `json:"kafka_cluster_id"`
	Version        OptString `json:"version"`
}

// GetCommit returns the value of Commit.
func (s *ServerInfo) GetCommit() OptString {
	return s.Commit
}

// GetKafkaClusterID returns the value of KafkaClusterID.
func (s *ServerInfo) GetKafkaClusterID() OptString {
	return s.KafkaClusterID
}

// GetVersion returns the value of Version.
func (s *ServerInfo) GetVersion() OptString {
	return s.Version
}

// SetCommit sets the value of Commit.
func (s *ServerInfo) SetCommit(val OptString) {
	s.Commit = val
}

// SetKafkaClusterID sets the value of KafkaClusterID.
func (s *ServerInfo) SetKafkaClusterID(val OptString) {
	s.KafkaClusterID = val
}

// SetVersion sets the value of Version.
func (s *ServerInfo) SetVersion(val OptString) {
	s.Version = val
}

// ServerInfoStatusCode wraps ServerInfo with StatusCode.
type ServerInfoStatusCode struct {
	StatusCode int
	Response   ServerInfo
}

// GetStatusCode returns the value of StatusCode.
func (s *ServerInfoStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ServerInfoStatusCode) GetResponse() ServerInfo {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ServerInfoStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ServerInfoStatusCode) SetResponse(val ServerInfo) {
	s.Response = val
}

// Ref: #/components/schemas/TaskInfo
type TaskInfo struct {
	Config OptTaskInfoConfig  `json:"config"`
	ID     OptConnectorTaskId `json:"id"`
}

// GetConfig returns the value of Config.
func (s *TaskInfo) GetConfig() OptTaskInfoConfig {
	return s.Config
}

// GetID returns the value of ID.
func (s *TaskInfo) GetID() OptConnectorTaskId {
	return s.ID
}

// SetConfig sets the value of Config.
func (s *TaskInfo) SetConfig(val OptTaskInfoConfig) {
	s.Config = val
}

// SetID sets the value of ID.
func (s *TaskInfo) SetID(val OptConnectorTaskId) {
	s.ID = val
}

type TaskInfoConfig map[string]string

func (s *TaskInfoConfig) init() TaskInfoConfig {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/TaskState
type TaskState struct {
	ID       OptInt32  `json:"id"`
	Msg      OptString `json:"msg"`
	State    OptString `json:"state"`
	Trace    OptString `json:"trace"`
	WorkerID OptString `json:"worker_id"`
}

// GetID returns the value of ID.
func (s *TaskState) GetID() OptInt32 {
	return s.ID
}

// GetMsg returns the value of Msg.
func (s *TaskState) GetMsg() OptString {
	return s.Msg
}

// GetState returns the value of State.
func (s *TaskState) GetState() OptString {
	return s.State
}

// GetTrace returns the value of Trace.
func (s *TaskState) GetTrace() OptString {
	return s.Trace
}

// GetWorkerID returns the value of WorkerID.
func (s *TaskState) GetWorkerID() OptString {
	return s.WorkerID
}

// SetID sets the value of ID.
func (s *TaskState) SetID(val OptInt32) {
	s.ID = val
}

// SetMsg sets the value of Msg.
func (s *TaskState) SetMsg(val OptString) {
	s.Msg = val
}

// SetState sets the value of State.
func (s *TaskState) SetState(val OptString) {
	s.State = val
}

// SetTrace sets the value of Trace.
func (s *TaskState) SetTrace(val OptString) {
	s.Trace = val
}

// SetWorkerID sets the value of WorkerID.
func (s *TaskState) SetWorkerID(val OptString) {
	s.WorkerID = val
}

// TaskStateStatusCode wraps TaskState with StatusCode.
type TaskStateStatusCode struct {
	StatusCode int
	Response   TaskState
}

// GetStatusCode returns the value of StatusCode.
func (s *TaskStateStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *TaskStateStatusCode) GetResponse() TaskState {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *TaskStateStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *TaskStateStatusCode) SetResponse(val TaskState) {
	s.Response = val
}

type ValidateConfigsReq map[string]string

func (s *ValidateConfigsReq) init() ValidateConfigsReq {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}
