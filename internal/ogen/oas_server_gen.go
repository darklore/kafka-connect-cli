// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateConnector implements createConnector operation.
	//
	// Create a new connector.
	//
	// POST /connectors
	CreateConnector(ctx context.Context, req OptCreateConnectorRequest) (*ConnectorInfoStatusCode, error)
	// GetConnector implements getConnector operation.
	//
	// Get the details for the specified connector.
	//
	// GET /connectors/{connector}
	GetConnector(ctx context.Context, params GetConnectorParams) (*ConnectorInfoStatusCode, error)
	// GetConnectorActiveTopics implements getConnectorActiveTopics operation.
	//
	// Get the list of topics actively used by the specified connector.
	//
	// GET /connectors/{connector}/topics
	GetConnectorActiveTopics(ctx context.Context, params GetConnectorActiveTopicsParams) (*ConnectorActiveTopicsStatusCode, error)
	// GetConnectorConfig implements getConnectorConfig operation.
	//
	// Get the configuration for the specified connector.
	//
	// GET /connectors/{connector}/config
	GetConnectorConfig(ctx context.Context, params GetConnectorConfigParams) (*GetConnectorConfigDefStatusCode, error)
	// GetConnectorConfigDef implements getConnectorConfigDef operation.
	//
	// Get the configuration definition for the specified pluginName.
	//
	// GET /connector-plugins/{pluginName}/config
	GetConnectorConfigDef(ctx context.Context, params GetConnectorConfigDefParams) (*GetConnectorConfigDefDefStatusCode, error)
	// GetConnectorStatus implements getConnectorStatus operation.
	//
	// Get the status for the specified connector.
	//
	// GET /connectors/{connector}/status
	GetConnectorStatus(ctx context.Context, params GetConnectorStatusParams) (*ConnectorStateInfoStatusCode, error)
	// GetOffsets implements getOffsets operation.
	//
	// Get the current offsets for the specified connector.
	//
	// GET /connectors/{connector}/offsets
	GetOffsets(ctx context.Context, params GetOffsetsParams) (*ConnectorOffsetsStatusCode, error)
	// GetTaskConfigs implements getTaskConfigs operation.
	//
	// List all tasks and their configurations for the specified connector.
	//
	// GET /connectors/{connector}/tasks
	GetTaskConfigs(ctx context.Context, params GetTaskConfigsParams) (*GetTaskConfigsDefStatusCode, error)
	// GetTaskStatus implements getTaskStatus operation.
	//
	// Get the state of the specified task for the specified connector.
	//
	// GET /connectors/{connector}/tasks/{task}/status
	GetTaskStatus(ctx context.Context, params GetTaskStatusParams) (*TaskStateStatusCode, error)
	// GetTasksConfig implements getTasksConfig operation.
	//
	// Get the configuration of all tasks for the specified connector.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// GET /connectors/{connector}/tasks-config
	GetTasksConfig(ctx context.Context, params GetTasksConfigParams) (*GetTasksConfigDefStatusCode, error)
	// ListConnectorPlugins implements listConnectorPlugins operation.
	//
	// List all connector plugins installed.
	//
	// GET /connector-plugins
	ListConnectorPlugins(ctx context.Context, params ListConnectorPluginsParams) (*ListConnectorPluginsDefStatusCode, error)
	// ListConnectors implements listConnectors operation.
	//
	// List all active connectors.
	//
	// GET /connectors
	ListConnectors(ctx context.Context) (*ListConnectorsDefStatusCode, error)
	// PutConnectorConfig implements putConnectorConfig operation.
	//
	// Create or reconfigure the specified connector.
	//
	// PUT /connectors/{connector}/config
	PutConnectorConfig(ctx context.Context, req OptConnectorConfig, params PutConnectorConfigParams) (*ConnectorInfoStatusCode, error)
	// ServerInfo implements serverInfo operation.
	//
	// Get details about this Connect worker and the ID of the Kafka cluster it is connected to.
	//
	// GET /
	ServerInfo(ctx context.Context) (*ServerInfoStatusCode, error)
	// ValidateConfigs implements validateConfigs operation.
	//
	// Validate the provided configuration against the configuration definition for the specified
	// pluginName.
	//
	// PUT /connector-plugins/{pluginName}/config/validate
	ValidateConfigs(ctx context.Context, req OptValidateConfigsReq, params ValidateConfigsParams) (*ConfigInfosStatusCode, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
