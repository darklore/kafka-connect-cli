// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetConnectorParams is parameters of getConnector operation.
type GetConnectorParams struct {
	Connector string
}

func unpackGetConnectorParams(packed middleware.Parameters) (params GetConnectorParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetConnectorParams(args [1]string, argsEscaped bool, r *http.Request) (params GetConnectorParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetConnectorActiveTopicsParams is parameters of getConnectorActiveTopics operation.
type GetConnectorActiveTopicsParams struct {
	Connector string
}

func unpackGetConnectorActiveTopicsParams(packed middleware.Parameters) (params GetConnectorActiveTopicsParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetConnectorActiveTopicsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetConnectorActiveTopicsParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetConnectorConfigParams is parameters of getConnectorConfig operation.
type GetConnectorConfigParams struct {
	Connector string
}

func unpackGetConnectorConfigParams(packed middleware.Parameters) (params GetConnectorConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetConnectorConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params GetConnectorConfigParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetConnectorConfigDefParams is parameters of getConnectorConfigDef operation.
type GetConnectorConfigDefParams struct {
	PluginName string
}

func unpackGetConnectorConfigDefParams(packed middleware.Parameters) (params GetConnectorConfigDefParams) {
	{
		key := middleware.ParameterKey{
			Name: "pluginName",
			In:   "path",
		}
		params.PluginName = packed[key].(string)
	}
	return params
}

func decodeGetConnectorConfigDefParams(args [1]string, argsEscaped bool, r *http.Request) (params GetConnectorConfigDefParams, _ error) {
	// Decode path: pluginName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pluginName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PluginName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pluginName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetConnectorStatusParams is parameters of getConnectorStatus operation.
type GetConnectorStatusParams struct {
	Connector string
}

func unpackGetConnectorStatusParams(packed middleware.Parameters) (params GetConnectorStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetConnectorStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params GetConnectorStatusParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOffsetsParams is parameters of getOffsets operation.
type GetOffsetsParams struct {
	Connector string
}

func unpackGetOffsetsParams(packed middleware.Parameters) (params GetOffsetsParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetOffsetsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOffsetsParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTaskConfigsParams is parameters of getTaskConfigs operation.
type GetTaskConfigsParams struct {
	Connector string
}

func unpackGetTaskConfigsParams(packed middleware.Parameters) (params GetTaskConfigsParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetTaskConfigsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTaskConfigsParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTaskStatusParams is parameters of getTaskStatus operation.
type GetTaskStatusParams struct {
	Connector string
	Task      int32
}

func unpackGetTaskStatusParams(packed middleware.Parameters) (params GetTaskStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "task",
			In:   "path",
		}
		params.Task = packed[key].(int32)
	}
	return params
}

func decodeGetTaskStatusParams(args [2]string, argsEscaped bool, r *http.Request) (params GetTaskStatusParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: task.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "task",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.Task = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "task",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetTasksConfigParams is parameters of getTasksConfig operation.
type GetTasksConfigParams struct {
	Connector string
}

func unpackGetTasksConfigParams(packed middleware.Parameters) (params GetTasksConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodeGetTasksConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTasksConfigParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListConnectorPluginsParams is parameters of listConnectorPlugins operation.
type ListConnectorPluginsParams struct {
	// Whether to list only connectors instead of all plugins.
	ConnectorsOnly OptBool
}

func unpackListConnectorPluginsParams(packed middleware.Parameters) (params ListConnectorPluginsParams) {
	{
		key := middleware.ParameterKey{
			Name: "connectorsOnly",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ConnectorsOnly = v.(OptBool)
		}
	}
	return params
}

func decodeListConnectorPluginsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListConnectorPluginsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: connectorsOnly.
	{
		val := bool(true)
		params.ConnectorsOnly.SetTo(val)
	}
	// Decode query: connectorsOnly.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "connectorsOnly",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotConnectorsOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotConnectorsOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ConnectorsOnly.SetTo(paramsDotConnectorsOnlyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connectorsOnly",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PutConnectorConfigParams is parameters of putConnectorConfig operation.
type PutConnectorConfigParams struct {
	Connector string
}

func unpackPutConnectorConfigParams(packed middleware.Parameters) (params PutConnectorConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "connector",
			In:   "path",
		}
		params.Connector = packed[key].(string)
	}
	return params
}

func decodePutConnectorConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params PutConnectorConfigParams, _ error) {
	// Decode path: connector.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "connector",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Connector = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "connector",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ValidateConfigsParams is parameters of validateConfigs operation.
type ValidateConfigsParams struct {
	PluginName string
}

func unpackValidateConfigsParams(packed middleware.Parameters) (params ValidateConfigsParams) {
	{
		key := middleware.ParameterKey{
			Name: "pluginName",
			In:   "path",
		}
		params.PluginName = packed[key].(string)
	}
	return params
}

func decodeValidateConfigsParams(args [1]string, argsEscaped bool, r *http.Request) (params ValidateConfigsParams, _ error) {
	// Decode path: pluginName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "pluginName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PluginName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pluginName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
