/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigInfos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigInfos{}

// ConfigInfos struct for ConfigInfos
type ConfigInfos struct {
	Configs []ConfigInfo `json:"configs,omitempty"`
	ErrorCount *int32 `json:"error_count,omitempty"`
	Groups []string `json:"groups,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewConfigInfos instantiates a new ConfigInfos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigInfos() *ConfigInfos {
	this := ConfigInfos{}
	return &this
}

// NewConfigInfosWithDefaults instantiates a new ConfigInfos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigInfosWithDefaults() *ConfigInfos {
	this := ConfigInfos{}
	return &this
}

// GetConfigs returns the Configs field value if set, zero value otherwise.
func (o *ConfigInfos) GetConfigs() []ConfigInfo {
	if o == nil || IsNil(o.Configs) {
		var ret []ConfigInfo
		return ret
	}
	return o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigInfos) GetConfigsOk() ([]ConfigInfo, bool) {
	if o == nil || IsNil(o.Configs) {
		return nil, false
	}
	return o.Configs, true
}

// HasConfigs returns a boolean if a field has been set.
func (o *ConfigInfos) HasConfigs() bool {
	if o != nil && !IsNil(o.Configs) {
		return true
	}

	return false
}

// SetConfigs gets a reference to the given []ConfigInfo and assigns it to the Configs field.
func (o *ConfigInfos) SetConfigs(v []ConfigInfo) {
	o.Configs = v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *ConfigInfos) GetErrorCount() int32 {
	if o == nil || IsNil(o.ErrorCount) {
		var ret int32
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigInfos) GetErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCount) {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *ConfigInfos) HasErrorCount() bool {
	if o != nil && !IsNil(o.ErrorCount) {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given int32 and assigns it to the ErrorCount field.
func (o *ConfigInfos) SetErrorCount(v int32) {
	o.ErrorCount = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ConfigInfos) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigInfos) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ConfigInfos) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *ConfigInfos) SetGroups(v []string) {
	o.Groups = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigInfos) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigInfos) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigInfos) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigInfos) SetName(v string) {
	o.Name = &v
}

func (o ConfigInfos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigInfos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configs) {
		toSerialize["configs"] = o.Configs
	}
	if !IsNil(o.ErrorCount) {
		toSerialize["error_count"] = o.ErrorCount
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableConfigInfos struct {
	value *ConfigInfos
	isSet bool
}

func (v NullableConfigInfos) Get() *ConfigInfos {
	return v.value
}

func (v *NullableConfigInfos) Set(val *ConfigInfos) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigInfos) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigInfos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigInfos(val *ConfigInfos) *NullableConfigInfos {
	return &NullableConfigInfos{value: val, isSet: true}
}

func (v NullableConfigInfos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigInfos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


