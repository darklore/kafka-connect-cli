/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectorOffsets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorOffsets{}

// ConnectorOffsets struct for ConnectorOffsets
type ConnectorOffsets struct {
	Offsets []ConnectorOffset `json:"offsets,omitempty"`
}

// NewConnectorOffsets instantiates a new ConnectorOffsets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorOffsets() *ConnectorOffsets {
	this := ConnectorOffsets{}
	return &this
}

// NewConnectorOffsetsWithDefaults instantiates a new ConnectorOffsets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorOffsetsWithDefaults() *ConnectorOffsets {
	this := ConnectorOffsets{}
	return &this
}

// GetOffsets returns the Offsets field value if set, zero value otherwise.
func (o *ConnectorOffsets) GetOffsets() []ConnectorOffset {
	if o == nil || IsNil(o.Offsets) {
		var ret []ConnectorOffset
		return ret
	}
	return o.Offsets
}

// GetOffsetsOk returns a tuple with the Offsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorOffsets) GetOffsetsOk() ([]ConnectorOffset, bool) {
	if o == nil || IsNil(o.Offsets) {
		return nil, false
	}
	return o.Offsets, true
}

// HasOffsets returns a boolean if a field has been set.
func (o *ConnectorOffsets) HasOffsets() bool {
	if o != nil && !IsNil(o.Offsets) {
		return true
	}

	return false
}

// SetOffsets gets a reference to the given []ConnectorOffset and assigns it to the Offsets field.
func (o *ConnectorOffsets) SetOffsets(v []ConnectorOffset) {
	o.Offsets = v
}

func (o ConnectorOffsets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorOffsets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offsets) {
		toSerialize["offsets"] = o.Offsets
	}
	return toSerialize, nil
}

type NullableConnectorOffsets struct {
	value *ConnectorOffsets
	isSet bool
}

func (v NullableConnectorOffsets) Get() *ConnectorOffsets {
	return v.value
}

func (v *NullableConnectorOffsets) Set(val *ConnectorOffsets) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorOffsets) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorOffsets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorOffsets(val *ConnectorOffsets) *NullableConnectorOffsets {
	return &NullableConnectorOffsets{value: val, isSet: true}
}

func (v NullableConnectorOffsets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorOffsets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


