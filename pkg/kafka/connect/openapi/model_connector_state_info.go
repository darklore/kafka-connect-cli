/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectorStateInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorStateInfo{}

// ConnectorStateInfo struct for ConnectorStateInfo
type ConnectorStateInfo struct {
	Connector *ConnectorState `json:"connector,omitempty"`
	Name *string `json:"name,omitempty"`
	Tasks []TaskState `json:"tasks,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewConnectorStateInfo instantiates a new ConnectorStateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorStateInfo() *ConnectorStateInfo {
	this := ConnectorStateInfo{}
	return &this
}

// NewConnectorStateInfoWithDefaults instantiates a new ConnectorStateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorStateInfoWithDefaults() *ConnectorStateInfo {
	this := ConnectorStateInfo{}
	return &this
}

// GetConnector returns the Connector field value if set, zero value otherwise.
func (o *ConnectorStateInfo) GetConnector() ConnectorState {
	if o == nil || IsNil(o.Connector) {
		var ret ConnectorState
		return ret
	}
	return *o.Connector
}

// GetConnectorOk returns a tuple with the Connector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStateInfo) GetConnectorOk() (*ConnectorState, bool) {
	if o == nil || IsNil(o.Connector) {
		return nil, false
	}
	return o.Connector, true
}

// HasConnector returns a boolean if a field has been set.
func (o *ConnectorStateInfo) HasConnector() bool {
	if o != nil && !IsNil(o.Connector) {
		return true
	}

	return false
}

// SetConnector gets a reference to the given ConnectorState and assigns it to the Connector field.
func (o *ConnectorStateInfo) SetConnector(v ConnectorState) {
	o.Connector = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorStateInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStateInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorStateInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorStateInfo) SetName(v string) {
	o.Name = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ConnectorStateInfo) GetTasks() []TaskState {
	if o == nil || IsNil(o.Tasks) {
		var ret []TaskState
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStateInfo) GetTasksOk() ([]TaskState, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ConnectorStateInfo) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []TaskState and assigns it to the Tasks field.
func (o *ConnectorStateInfo) SetTasks(v []TaskState) {
	o.Tasks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorStateInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorStateInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorStateInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectorStateInfo) SetType(v string) {
	o.Type = &v
}

func (o ConnectorStateInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorStateInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connector) {
		toSerialize["connector"] = o.Connector
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableConnectorStateInfo struct {
	value *ConnectorStateInfo
	isSet bool
}

func (v NullableConnectorStateInfo) Get() *ConnectorStateInfo {
	return v.value
}

func (v *NullableConnectorStateInfo) Set(val *ConnectorStateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorStateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorStateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorStateInfo(val *ConnectorStateInfo) *NullableConnectorStateInfo {
	return &NullableConnectorStateInfo{value: val, isSet: true}
}

func (v NullableConnectorStateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorStateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


