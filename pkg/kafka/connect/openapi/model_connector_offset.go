/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectorOffset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorOffset{}

// ConnectorOffset struct for ConnectorOffset
type ConnectorOffset struct {
	Offset map[string]map[string]interface{} `json:"offset,omitempty"`
	Partition map[string]map[string]interface{} `json:"partition,omitempty"`
}

// NewConnectorOffset instantiates a new ConnectorOffset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorOffset() *ConnectorOffset {
	this := ConnectorOffset{}
	return &this
}

// NewConnectorOffsetWithDefaults instantiates a new ConnectorOffset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorOffsetWithDefaults() *ConnectorOffset {
	this := ConnectorOffset{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ConnectorOffset) GetOffset() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Offset) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorOffset) GetOffsetOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Offset) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ConnectorOffset) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given map[string]map[string]interface{} and assigns it to the Offset field.
func (o *ConnectorOffset) SetOffset(v map[string]map[string]interface{}) {
	o.Offset = v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *ConnectorOffset) GetPartition() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Partition) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorOffset) GetPartitionOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Partition) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *ConnectorOffset) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given map[string]map[string]interface{} and assigns it to the Partition field.
func (o *ConnectorOffset) SetPartition(v map[string]map[string]interface{}) {
	o.Partition = v
}

func (o ConnectorOffset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorOffset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	return toSerialize, nil
}

type NullableConnectorOffset struct {
	value *ConnectorOffset
	isSet bool
}

func (v NullableConnectorOffset) Get() *ConnectorOffset {
	return v.value
}

func (v *NullableConnectorOffset) Set(val *ConnectorOffset) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorOffset) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorOffset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorOffset(val *ConnectorOffset) *NullableConnectorOffset {
	return &NullableConnectorOffset{value: val, isSet: true}
}

func (v NullableConnectorOffset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorOffset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


