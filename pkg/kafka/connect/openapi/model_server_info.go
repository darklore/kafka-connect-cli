/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInfo{}

// ServerInfo struct for ServerInfo
type ServerInfo struct {
	Commit *string `json:"commit,omitempty"`
	KafkaClusterId *string `json:"kafka_cluster_id,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewServerInfo instantiates a new ServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInfo() *ServerInfo {
	this := ServerInfo{}
	return &this
}

// NewServerInfoWithDefaults instantiates a new ServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInfoWithDefaults() *ServerInfo {
	this := ServerInfo{}
	return &this
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *ServerInfo) GetCommit() string {
	if o == nil || IsNil(o.Commit) {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetCommitOk() (*string, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *ServerInfo) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *ServerInfo) SetCommit(v string) {
	o.Commit = &v
}

// GetKafkaClusterId returns the KafkaClusterId field value if set, zero value otherwise.
func (o *ServerInfo) GetKafkaClusterId() string {
	if o == nil || IsNil(o.KafkaClusterId) {
		var ret string
		return ret
	}
	return *o.KafkaClusterId
}

// GetKafkaClusterIdOk returns a tuple with the KafkaClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetKafkaClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.KafkaClusterId) {
		return nil, false
	}
	return o.KafkaClusterId, true
}

// HasKafkaClusterId returns a boolean if a field has been set.
func (o *ServerInfo) HasKafkaClusterId() bool {
	if o != nil && !IsNil(o.KafkaClusterId) {
		return true
	}

	return false
}

// SetKafkaClusterId gets a reference to the given string and assigns it to the KafkaClusterId field.
func (o *ServerInfo) SetKafkaClusterId(v string) {
	o.KafkaClusterId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServerInfo) SetVersion(v string) {
	o.Version = &v
}

func (o ServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.KafkaClusterId) {
		toSerialize["kafka_cluster_id"] = o.KafkaClusterId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableServerInfo struct {
	value *ServerInfo
	isSet bool
}

func (v NullableServerInfo) Get() *ServerInfo {
	return v.value
}

func (v *NullableServerInfo) Set(val *ServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInfo(val *ServerInfo) *NullableServerInfo {
	return &NullableServerInfo{value: val, isSet: true}
}

func (v NullableServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


