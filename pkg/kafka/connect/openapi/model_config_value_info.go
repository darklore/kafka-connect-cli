/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigValueInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigValueInfo{}

// ConfigValueInfo struct for ConfigValueInfo
type ConfigValueInfo struct {
	Errors []string `json:"errors,omitempty"`
	Name *string `json:"name,omitempty"`
	RecommendedValues []string `json:"recommended_values,omitempty"`
	Value *string `json:"value,omitempty"`
	Visible *bool `json:"visible,omitempty"`
}

// NewConfigValueInfo instantiates a new ConfigValueInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigValueInfo() *ConfigValueInfo {
	this := ConfigValueInfo{}
	return &this
}

// NewConfigValueInfoWithDefaults instantiates a new ConfigValueInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigValueInfoWithDefaults() *ConfigValueInfo {
	this := ConfigValueInfo{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ConfigValueInfo) GetErrors() []string {
	if o == nil || IsNil(o.Errors) {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigValueInfo) GetErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ConfigValueInfo) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *ConfigValueInfo) SetErrors(v []string) {
	o.Errors = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigValueInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigValueInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigValueInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigValueInfo) SetName(v string) {
	o.Name = &v
}

// GetRecommendedValues returns the RecommendedValues field value if set, zero value otherwise.
func (o *ConfigValueInfo) GetRecommendedValues() []string {
	if o == nil || IsNil(o.RecommendedValues) {
		var ret []string
		return ret
	}
	return o.RecommendedValues
}

// GetRecommendedValuesOk returns a tuple with the RecommendedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigValueInfo) GetRecommendedValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.RecommendedValues) {
		return nil, false
	}
	return o.RecommendedValues, true
}

// HasRecommendedValues returns a boolean if a field has been set.
func (o *ConfigValueInfo) HasRecommendedValues() bool {
	if o != nil && !IsNil(o.RecommendedValues) {
		return true
	}

	return false
}

// SetRecommendedValues gets a reference to the given []string and assigns it to the RecommendedValues field.
func (o *ConfigValueInfo) SetRecommendedValues(v []string) {
	o.RecommendedValues = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConfigValueInfo) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigValueInfo) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConfigValueInfo) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConfigValueInfo) SetValue(v string) {
	o.Value = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *ConfigValueInfo) GetVisible() bool {
	if o == nil || IsNil(o.Visible) {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigValueInfo) GetVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Visible) {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *ConfigValueInfo) HasVisible() bool {
	if o != nil && !IsNil(o.Visible) {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *ConfigValueInfo) SetVisible(v bool) {
	o.Visible = &v
}

func (o ConfigValueInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigValueInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RecommendedValues) {
		toSerialize["recommended_values"] = o.RecommendedValues
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Visible) {
		toSerialize["visible"] = o.Visible
	}
	return toSerialize, nil
}

type NullableConfigValueInfo struct {
	value *ConfigValueInfo
	isSet bool
}

func (v NullableConfigValueInfo) Get() *ConfigValueInfo {
	return v.value
}

func (v *NullableConfigValueInfo) Set(val *ConfigValueInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigValueInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigValueInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigValueInfo(val *ConfigValueInfo) *NullableConfigValueInfo {
	return &NullableConfigValueInfo{value: val, isSet: true}
}

func (v NullableConfigValueInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigValueInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


