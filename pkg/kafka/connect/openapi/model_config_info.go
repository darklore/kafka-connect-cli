/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConfigInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigInfo{}

// ConfigInfo struct for ConfigInfo
type ConfigInfo struct {
	Definition *ConfigKeyInfo `json:"definition,omitempty"`
	Value *ConfigValueInfo `json:"value,omitempty"`
}

// NewConfigInfo instantiates a new ConfigInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigInfo() *ConfigInfo {
	this := ConfigInfo{}
	return &this
}

// NewConfigInfoWithDefaults instantiates a new ConfigInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigInfoWithDefaults() *ConfigInfo {
	this := ConfigInfo{}
	return &this
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *ConfigInfo) GetDefinition() ConfigKeyInfo {
	if o == nil || IsNil(o.Definition) {
		var ret ConfigKeyInfo
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigInfo) GetDefinitionOk() (*ConfigKeyInfo, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *ConfigInfo) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given ConfigKeyInfo and assigns it to the Definition field.
func (o *ConfigInfo) SetDefinition(v ConfigKeyInfo) {
	o.Definition = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConfigInfo) GetValue() ConfigValueInfo {
	if o == nil || IsNil(o.Value) {
		var ret ConfigValueInfo
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigInfo) GetValueOk() (*ConfigValueInfo, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConfigInfo) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given ConfigValueInfo and assigns it to the Value field.
func (o *ConfigInfo) SetValue(v ConfigValueInfo) {
	o.Value = &v
}

func (o ConfigInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableConfigInfo struct {
	value *ConfigInfo
	isSet bool
}

func (v NullableConfigInfo) Get() *ConfigInfo {
	return v.value
}

func (v *NullableConfigInfo) Set(val *ConfigInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigInfo(val *ConfigInfo) *NullableConfigInfo {
	return &NullableConfigInfo{value: val, isSet: true}
}

func (v NullableConfigInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


