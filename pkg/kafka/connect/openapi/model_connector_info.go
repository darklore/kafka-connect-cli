/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorInfo{}

// ConnectorInfo struct for ConnectorInfo
type ConnectorInfo struct {
	Config *map[string]string `json:"config,omitempty"`
	Name *string `json:"name,omitempty"`
	Tasks []ConnectorTaskId `json:"tasks,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewConnectorInfo instantiates a new ConnectorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorInfo() *ConnectorInfo {
	this := ConnectorInfo{}
	return &this
}

// NewConnectorInfoWithDefaults instantiates a new ConnectorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorInfoWithDefaults() *ConnectorInfo {
	this := ConnectorInfo{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ConnectorInfo) GetConfig() map[string]string {
	if o == nil || IsNil(o.Config) {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorInfo) GetConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ConnectorInfo) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *ConnectorInfo) SetConfig(v map[string]string) {
	o.Config = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorInfo) SetName(v string) {
	o.Name = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ConnectorInfo) GetTasks() []ConnectorTaskId {
	if o == nil || IsNil(o.Tasks) {
		var ret []ConnectorTaskId
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorInfo) GetTasksOk() ([]ConnectorTaskId, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ConnectorInfo) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ConnectorTaskId and assigns it to the Tasks field.
func (o *ConnectorInfo) SetTasks(v []ConnectorTaskId) {
	o.Tasks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectorInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectorInfo) SetType(v string) {
	o.Type = &v
}

func (o ConnectorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableConnectorInfo struct {
	value *ConnectorInfo
	isSet bool
}

func (v NullableConnectorInfo) Get() *ConnectorInfo {
	return v.value
}

func (v *NullableConnectorInfo) Set(val *ConnectorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorInfo(val *ConnectorInfo) *NullableConnectorInfo {
	return &NullableConnectorInfo{value: val, isSet: true}
}

func (v NullableConnectorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


