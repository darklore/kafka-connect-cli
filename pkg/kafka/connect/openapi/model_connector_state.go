/*
Kafka Connect REST API

This is the documentation of the [Apache Kafka](https://kafka.apache.org) Connect REST API.

API version: 3.9.0
Contact: dev@kafka.apache.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConnectorState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorState{}

// ConnectorState struct for ConnectorState
type ConnectorState struct {
	Msg *string `json:"msg,omitempty"`
	State *string `json:"state,omitempty"`
	Trace *string `json:"trace,omitempty"`
	WorkerId *string `json:"worker_id,omitempty"`
}

// NewConnectorState instantiates a new ConnectorState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorState() *ConnectorState {
	this := ConnectorState{}
	return &this
}

// NewConnectorStateWithDefaults instantiates a new ConnectorState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorStateWithDefaults() *ConnectorState {
	this := ConnectorState{}
	return &this
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *ConnectorState) GetMsg() string {
	if o == nil || IsNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorState) GetMsgOk() (*string, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *ConnectorState) HasMsg() bool {
	if o != nil && !IsNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *ConnectorState) SetMsg(v string) {
	o.Msg = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ConnectorState) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorState) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ConnectorState) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ConnectorState) SetState(v string) {
	o.State = &v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *ConnectorState) GetTrace() string {
	if o == nil || IsNil(o.Trace) {
		var ret string
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorState) GetTraceOk() (*string, bool) {
	if o == nil || IsNil(o.Trace) {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *ConnectorState) HasTrace() bool {
	if o != nil && !IsNil(o.Trace) {
		return true
	}

	return false
}

// SetTrace gets a reference to the given string and assigns it to the Trace field.
func (o *ConnectorState) SetTrace(v string) {
	o.Trace = &v
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *ConnectorState) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId) {
		var ret string
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorState) GetWorkerIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkerId) {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *ConnectorState) HasWorkerId() bool {
	if o != nil && !IsNil(o.WorkerId) {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given string and assigns it to the WorkerId field.
func (o *ConnectorState) SetWorkerId(v string) {
	o.WorkerId = &v
}

func (o ConnectorState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Trace) {
		toSerialize["trace"] = o.Trace
	}
	if !IsNil(o.WorkerId) {
		toSerialize["worker_id"] = o.WorkerId
	}
	return toSerialize, nil
}

type NullableConnectorState struct {
	value *ConnectorState
	isSet bool
}

func (v NullableConnectorState) Get() *ConnectorState {
	return v.value
}

func (v *NullableConnectorState) Set(val *ConnectorState) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorState) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorState(val *ConnectorState) *NullableConnectorState {
	return &NullableConnectorState{value: val, isSet: true}
}

func (v NullableConnectorState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


